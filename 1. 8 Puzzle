from queue import PriorityQueue

def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                x, y = divmod(state[i][j] - 1, 3)
                distance += abs(x - i) + abs(y - j)
    return distance

def get_neighbors(state):
    neighbors = []
    zero_pos = [(i, j) for i in range(3) for j in range(3) if state[i][j] == 0][0]
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up

    for dx, dy in directions:
        x, y = zero_pos[0] + dx, zero_pos[1] + dy
        if 0 <= x < 3 and 0 <= y < 3:
            new_state = [list(row) for row in state]
            new_state[zero_pos[0]][zero_pos[1]], new_state[x][y] = new_state[x][y], new_state[zero_pos[0]][zero_pos[1]]
            neighbors.append(new_state)
    return neighbors

def a_star(start):
    queue = PriorityQueue()
    queue.put((0, start))
    visited = set()
    
    while not queue.empty():
        cost, current = queue.get()
        visited.add(tuple(map(tuple, current)))

        if current == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            return current
        
        for neighbor in get_neighbors(current):
            if tuple(map(tuple, neighbor)) not in visited:
                total_cost = cost + 1 + heuristic(neighbor)
                queue.put((total_cost, neighbor))
    return None

initial_state = [[1, 2, 3], [4, 0, 5], [7, 8, 6]]
solution = a_star(initial_state)

if solution:
    print("Solution found:")
    for row in solution:
        print(row)
else:
    print("No solution exists.")
